{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6","program":"/home/pastra/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bitreader","/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=f42eaa35e90019d9","-C","extra-filename=-f42eaa35e90019d9","--out-dir","/home/pastra/code/rbot/target/rls/debug/deps","-L","dependency=/home/pastra/code/rbot/target/rls/debug/deps","--extern","cfg_if=/home/pastra/code/rbot/target/rls/debug/deps/libcfg_if-9c724a1a8bb6d895.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/pastra/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/pastra/code/rbot/target/rls/debug/deps/libbitreader-f42eaa35e90019d9.rmeta"},"prelude":{"crate_id":{"name":"bitreader","disambiguator":[3080697747356298341,0]},"crate_root":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src","external_crates":[{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5314938362831806024,0]}},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[3192916554191843392,0]}},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[10801551532821350179,0]}},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","num":4,"id":{"name":"cfg_if","disambiguator":[11900951980957517807,0]}},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","num":5,"id":{"name":"std","disambiguator":[6651269719699919063,0]}},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","num":6,"id":{"name":"alloc","disambiguator":[17712696282143808288,0]}},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","num":7,"id":{"name":"libc","disambiguator":[17759323731357012152,0]}},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[14544669950029098253,0]}},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","num":9,"id":{"name":"cfg_if","disambiguator":[7140361926623002963,0]}},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","num":10,"id":{"name":"hashbrown","disambiguator":[7912653715525474172,0]}},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","num":11,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9995494595343579593,0]}},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[7588845087494698681,0]}},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[1970575902162233525,0]}},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","num":14,"id":{"name":"addr2line","disambiguator":[17110431802946872365,0]}},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","num":15,"id":{"name":"gimli","disambiguator":[13012552651923263309,0]}},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","num":16,"id":{"name":"object","disambiguator":[12999591111048205696,0]}},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","num":17,"id":{"name":"memchr","disambiguator":[5038749270737079727,0]}},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","num":18,"id":{"name":"miniz_oxide","disambiguator":[4159898706074811085,0]}},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","num":19,"id":{"name":"adler","disambiguator":[8750230721255451893,0]}},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","num":20,"id":{"name":"panic_unwind","disambiguator":[1956939412839304600,0]}}],"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":334,"byte_end":17156,"line_start":9,"line_end":472,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":334,"byte_end":17156,"line_start":9,"line_end":472,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":4},{"krate":0,"index":10},{"krate":0,"index":37},{"krate":0,"index":62},{"krate":0,"index":71},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":45},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":46}],"decl_id":null,"docs":" BitReader is a helper type to extract strings of bits from a slice of bytes.","sig":null,"attributes":[{"value":"/ BitReader is a helper type to extract strings of bits from a slice of bytes.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":334,"byte_end":414,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":415,"byte_end":418,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Here is how you read first a single bit, then three bits and finally four bits from a byte","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":419,"byte_end":513,"line_start":11,"line_end":11,"column_start":1,"column_end":95}},{"value":"/ buffer:","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":514,"byte_end":525,"line_start":12,"line_end":12,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":526,"byte_end":529,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":530,"byte_end":537,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ use bitreader::BitReader;","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":538,"byte_end":567,"line_start":15,"line_end":15,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":568,"byte_end":571,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ let slice_of_u8 = &[0b1000_1111];","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":572,"byte_end":609,"line_start":17,"line_end":17,"column_start":1,"column_end":38}},{"value":"/ let mut reader = BitReader::new(slice_of_u8);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":610,"byte_end":659,"line_start":18,"line_end":18,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":660,"byte_end":663,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ // You probably should use try! or some other error handling mechanism in real code if the","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":664,"byte_end":758,"line_start":20,"line_end":20,"column_start":1,"column_end":95}},{"value":"/ // length of the input is not known in advance.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":759,"byte_end":810,"line_start":21,"line_end":21,"column_start":1,"column_end":52}},{"value":"/ let a_single_bit = reader.read_u8(1).unwrap();","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":811,"byte_end":861,"line_start":22,"line_end":22,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(a_single_bit, 1);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":862,"byte_end":894,"line_start":23,"line_end":23,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":895,"byte_end":898,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let more_bits = reader.read_u8(3).unwrap();","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":899,"byte_end":946,"line_start":25,"line_end":25,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(more_bits, 0);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":947,"byte_end":976,"line_start":26,"line_end":26,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":977,"byte_end":980,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ let last_bits_of_byte = reader.read_u8(4).unwrap();","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":981,"byte_end":1036,"line_start":28,"line_end":28,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(last_bits_of_byte, 0b1111);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":1037,"byte_end":1079,"line_start":29,"line_end":29,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":1080,"byte_end":1087,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ You can naturally read bits from longer buffer of data than just a single byte.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":1088,"byte_end":1171,"line_start":31,"line_end":31,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":1172,"byte_end":1175,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ As you read bits, the internal cursor of BitReader moves on along the stream of bits. Big","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":1176,"byte_end":1269,"line_start":33,"line_end":33,"column_start":1,"column_end":94}},{"value":"/ endian format is assumed when reading the multi-byte values. BitReader supports reading maximum","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":1270,"byte_end":1369,"line_start":34,"line_end":34,"column_start":1,"column_end":100}},{"value":"/ of 64 bits at a time (with read_u64). Reading signed values directly is not supported at the","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":1370,"byte_end":1466,"line_start":35,"line_end":35,"column_start":1,"column_end":97}},{"value":"/ moment.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":1467,"byte_end":1478,"line_start":36,"line_end":36,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":1479,"byte_end":1482,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ The reads do not need to be aligned in any particular way.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":1483,"byte_end":1545,"line_start":38,"line_end":38,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":1546,"byte_end":1549,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Reading zero bits is a no-op.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":1550,"byte_end":1583,"line_start":40,"line_end":40,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":1584,"byte_end":1587,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ You can also skip over a number of bits, in which case there is no arbitrary small limits like","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":1588,"byte_end":1686,"line_start":42,"line_end":42,"column_start":1,"column_end":99}},{"value":"/ when reading the values to a variable. However, you can not seek past the end of the slice,","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":1687,"byte_end":1782,"line_start":43,"line_end":43,"column_start":1,"column_end":96}},{"value":"/ either when reading or when skipping bits.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":1783,"byte_end":1829,"line_start":44,"line_end":44,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":1830,"byte_end":1833,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Note that the code will likely not work correctly if the slice is longer than 2^61 bytes, but","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":1834,"byte_end":1931,"line_start":46,"line_end":46,"column_start":1,"column_end":98}},{"value":"/ exceeding that should be pretty unlikely. Let's get back to this when people read exabytes of","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":1932,"byte_end":2029,"line_start":47,"line_end":47,"column_start":1,"column_end":98}},{"value":"/ information one bit at a time.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":2030,"byte_end":2064,"line_start":48,"line_end":48,"column_start":1,"column_end":35}},{"value":"no_std","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":2065,"byte_end":2075,"line_start":49,"line_end":49,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":4},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":2504,"byte_end":2513,"line_start":69,"line_end":69,"column_start":12,"column_end":21},"name":"BitReader","qualname":"::BitReader","value":"BitReader {  }","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9}],"decl_id":null,"docs":" BitReader reads data from a byte slice at the granularity of a single bit.\n","sig":null,"attributes":[{"value":"/ BitReader reads data from a byte slice at the granularity of a single bit.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":2414,"byte_end":2492,"line_start":68,"line_end":68,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":2953,"byte_end":2956,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<BitReader>::new","value":"pub fn new(&'a [u8]) -> BitReader","parent":null,"children":[],"decl_id":null,"docs":" Construct a new BitReader from a byte slice. The returned reader lives at most as long as\n the slice given to is valid.\n","sig":null,"attributes":[{"value":"/ Construct a new BitReader from a byte slice. The returned reader lives at most as long as","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":2811,"byte_end":2904,"line_start":80,"line_end":80,"column_start":5,"column_end":98}},{"value":"/ the slice given to is valid.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":2909,"byte_end":2941,"line_start":81,"line_end":81,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":4085,"byte_end":4100,"line_start":113,"line_end":113,"column_start":12,"column_end":27},"name":"relative_reader","qualname":"<BitReader>::relative_reader","value":"pub fn relative_reader(&Self) -> BitReader","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of current BitReader, with the difference that its position() returns\n positions relative to the position of the original BitReader at the construction time.\n After construction, both readers are otherwise completely independent, except of course\n for sharing the same source data.","sig":null,"attributes":[{"value":"/ Returns a copy of current BitReader, with the difference that its position() returns","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":3161,"byte_end":3249,"line_start":91,"line_end":91,"column_start":5,"column_end":93}},{"value":"/ positions relative to the position of the original BitReader at the construction time.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":3254,"byte_end":3344,"line_start":92,"line_end":92,"column_start":5,"column_end":95}},{"value":"/ After construction, both readers are otherwise completely independent, except of course","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":3349,"byte_end":3440,"line_start":93,"line_end":93,"column_start":5,"column_end":96}},{"value":"/ for sharing the same source data.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":3445,"byte_end":3482,"line_start":94,"line_end":94,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":3487,"byte_end":3490,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":3495,"byte_end":3502,"line_start":96,"line_end":96,"column_start":5,"column_end":12}},{"value":"/ use bitreader::BitReader;","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":3507,"byte_end":3536,"line_start":97,"line_end":97,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":3541,"byte_end":3544,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ let bytes = &[0b11110000, 0b00001111];","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":3549,"byte_end":3591,"line_start":99,"line_end":99,"column_start":5,"column_end":47}},{"value":"/ let mut original = BitReader::new(bytes);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":3596,"byte_end":3641,"line_start":100,"line_end":100,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(original.read_u8(4).unwrap(), 0b1111);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":3646,"byte_end":3699,"line_start":101,"line_end":101,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(original.position(), 4);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":3704,"byte_end":3743,"line_start":102,"line_end":102,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":3748,"byte_end":3751,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ let mut relative = original.relative_reader();","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":3756,"byte_end":3806,"line_start":104,"line_end":104,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(relative.position(), 0);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":3811,"byte_end":3850,"line_start":105,"line_end":105,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":3855,"byte_end":3858,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(original.read_u8(8).unwrap(), 0);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":3863,"byte_end":3911,"line_start":107,"line_end":107,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(relative.read_u8(8).unwrap(), 0);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":3916,"byte_end":3964,"line_start":108,"line_end":108,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":3969,"byte_end":3972,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(original.position(), 12);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":3977,"byte_end":4017,"line_start":110,"line_end":110,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(relative.position(), 8);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":4022,"byte_end":4061,"line_start":111,"line_end":111,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":4066,"byte_end":4073,"line_start":112,"line_end":112,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":5521,"byte_end":5543,"line_start":151,"line_end":151,"column_start":12,"column_end":34},"name":"relative_reader_atmost","qualname":"<BitReader>::relative_reader_atmost","value":"pub fn relative_reader_atmost(&Self, u64) -> BitReader","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of current BitReader, with the difference that its position() returns\n positions relative to the position of the original BitReader at the construction time, and\n will not allow reading more than len bits. After construction, both readers are otherwise ","sig":null,"attributes":[{"value":"/ Returns a copy of current BitReader, with the difference that its position() returns","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":4329,"byte_end":4417,"line_start":122,"line_end":122,"column_start":5,"column_end":93}},{"value":"/ positions relative to the position of the original BitReader at the construction time, and","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":4422,"byte_end":4516,"line_start":123,"line_end":123,"column_start":5,"column_end":99}},{"value":"/ will not allow reading more than len bits. After construction, both readers are otherwise ","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":4521,"byte_end":4615,"line_start":124,"line_end":124,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":4702,"byte_end":4705,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":4710,"byte_end":4717,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"/ use bitreader::BitReader;","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":4722,"byte_end":4751,"line_start":128,"line_end":128,"column_start":5,"column_end":34}},{"value":"/ use bitreader::BitReaderError;","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":4756,"byte_end":4790,"line_start":129,"line_end":129,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":4795,"byte_end":4798,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ let bytes = &[0b11110000, 0b00001111];","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":4803,"byte_end":4845,"line_start":131,"line_end":131,"column_start":5,"column_end":47}},{"value":"/ let mut original = BitReader::new(bytes);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":4850,"byte_end":4895,"line_start":132,"line_end":132,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(original.read_u8(4).unwrap(), 0b1111);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":4900,"byte_end":4953,"line_start":133,"line_end":133,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(original.position(), 4);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":4958,"byte_end":4997,"line_start":134,"line_end":134,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":5002,"byte_end":5005,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ let mut relative = original.relative_reader_atmost(8);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":5010,"byte_end":5068,"line_start":136,"line_end":136,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(relative.position(), 0);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":5073,"byte_end":5112,"line_start":137,"line_end":137,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":5117,"byte_end":5120,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(original.read_u8(8).unwrap(), 0);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":5125,"byte_end":5173,"line_start":139,"line_end":139,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(relative.read_u8(8).unwrap(), 0);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":5178,"byte_end":5226,"line_start":140,"line_end":140,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":5231,"byte_end":5234,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(original.position(), 12);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":5239,"byte_end":5279,"line_start":142,"line_end":142,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(relative.position(), 8);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":5284,"byte_end":5323,"line_start":143,"line_end":143,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":5328,"byte_end":5331,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(relative.read_u8(8).unwrap_err(), BitReaderError::NotEnoughData{","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":5336,"byte_end":5415,"line_start":145,"line_end":145,"column_start":5,"column_end":84}},{"value":"/    position: 8,","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":5420,"byte_end":5439,"line_start":146,"line_end":146,"column_start":5,"column_end":24}},{"value":"/    length: 8,","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":5444,"byte_end":5461,"line_start":147,"line_end":147,"column_start":5,"column_end":22}},{"value":"/    requested: 8","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":5466,"byte_end":5485,"line_start":148,"line_end":148,"column_start":5,"column_end":24}},{"value":"/ });","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":5490,"byte_end":5497,"line_start":149,"line_end":149,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":5502,"byte_end":5509,"line_start":150,"line_end":150,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":5838,"byte_end":5845,"line_start":161,"line_end":161,"column_start":12,"column_end":19},"name":"read_u8","qualname":"<BitReader>::read_u8","value":"pub fn read_u8(&mut Self, u8) -> Result<u8>","parent":null,"children":[],"decl_id":null,"docs":" Read at most 8 bits into a u8.\n","sig":null,"attributes":[{"value":"/ Read at most 8 bits into a u8.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":5792,"byte_end":5826,"line_start":160,"line_end":160,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":6069,"byte_end":6076,"line_start":167,"line_end":167,"column_start":12,"column_end":19},"name":"peek_u8","qualname":"<BitReader>::peek_u8","value":"pub fn peek_u8(&Self, u8) -> Result<u8>","parent":null,"children":[],"decl_id":null,"docs":" Read at most 8 bits into a u8, but without moving the cursor forward.\n","sig":null,"attributes":[{"value":"/ Read at most 8 bits into a u8, but without moving the cursor forward.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":5984,"byte_end":6057,"line_start":166,"line_end":166,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":6418,"byte_end":6431,"line_start":174,"line_end":174,"column_start":12,"column_end":25},"name":"read_u8_slice","qualname":"<BitReader>::read_u8_slice","value":"pub fn read_u8_slice(&mut Self, &mut [u8]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Fills the entire `output_bytes` slice. If there aren't enough bits remaining\n after the internal cursor's current position, the cursor won't be moved forward\n and the contents of `output_bytes` won't be modified.\n","sig":null,"attributes":[{"value":"/ Fills the entire `output_bytes` slice. If there aren't enough bits remaining","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":6176,"byte_end":6256,"line_start":171,"line_end":171,"column_start":5,"column_end":85}},{"value":"/ after the internal cursor's current position, the cursor won't be moved forward","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":6261,"byte_end":6344,"line_start":172,"line_end":172,"column_start":5,"column_end":88}},{"value":"/ and the contents of `output_bytes` won't be modified.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":6349,"byte_end":6406,"line_start":173,"line_end":173,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":6962,"byte_end":6970,"line_start":191,"line_end":191,"column_start":12,"column_end":20},"name":"read_u16","qualname":"<BitReader>::read_u16","value":"pub fn read_u16(&mut Self, u8) -> Result<u16>","parent":null,"children":[],"decl_id":null,"docs":" Read at most 16 bits into a u16.\n","sig":null,"attributes":[{"value":"/ Read at most 16 bits into a u16.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":6914,"byte_end":6950,"line_start":190,"line_end":190,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":7201,"byte_end":7209,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"peek_u16","qualname":"<BitReader>::peek_u16","value":"pub fn peek_u16(&Self, u8) -> Result<u16>","parent":null,"children":[],"decl_id":null,"docs":" Read at most 16 bits into a u16, but without moving the cursor forward.\n","sig":null,"attributes":[{"value":"/ Read at most 16 bits into a u16, but without moving the cursor forward.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":7114,"byte_end":7189,"line_start":196,"line_end":196,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":7359,"byte_end":7367,"line_start":202,"line_end":202,"column_start":12,"column_end":20},"name":"read_u32","qualname":"<BitReader>::read_u32","value":"pub fn read_u32(&mut Self, u8) -> Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Read at most 32 bits into a u32.\n","sig":null,"attributes":[{"value":"/ Read at most 32 bits into a u32.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":7311,"byte_end":7347,"line_start":201,"line_end":201,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":7602,"byte_end":7610,"line_start":208,"line_end":208,"column_start":12,"column_end":20},"name":"peek_u32","qualname":"<BitReader>::peek_u32","value":"pub fn peek_u32(&Self, u8) -> Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Read at most 32 bits into a u32, but without moving the cursor forward.\n","sig":null,"attributes":[{"value":"/ Read at most 32 bits into a u32, but without moving the cursor forward.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":7515,"byte_end":7590,"line_start":207,"line_end":207,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":7760,"byte_end":7768,"line_start":213,"line_end":213,"column_start":12,"column_end":20},"name":"read_u64","qualname":"<BitReader>::read_u64","value":"pub fn read_u64(&mut Self, u8) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":" Read at most 64 bits into a u64.\n","sig":null,"attributes":[{"value":"/ Read at most 64 bits into a u64.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":7712,"byte_end":7748,"line_start":212,"line_end":212,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":7981,"byte_end":7989,"line_start":219,"line_end":219,"column_start":12,"column_end":20},"name":"peek_u64","qualname":"<BitReader>::peek_u64","value":"pub fn peek_u64(&Self, u8) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":" Read at most 64 bits into a u64, but without moving the cursor forward.\n","sig":null,"attributes":[{"value":"/ Read at most 64 bits into a u64, but without moving the cursor forward.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":7894,"byte_end":7969,"line_start":218,"line_end":218,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":8201,"byte_end":8208,"line_start":225,"line_end":225,"column_start":12,"column_end":19},"name":"read_i8","qualname":"<BitReader>::read_i8","value":"pub fn read_i8(&mut Self, u8) -> Result<i8>","parent":null,"children":[],"decl_id":null,"docs":" Read at most 8 bits into a i8.\n Assumes the bits are stored in two's complement format.\n","sig":null,"attributes":[{"value":"/ Read at most 8 bits into a i8.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":8091,"byte_end":8125,"line_start":223,"line_end":223,"column_start":5,"column_end":39}},{"value":"/ Assumes the bits are stored in two's complement format.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":8130,"byte_end":8189,"line_start":224,"line_end":224,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":8466,"byte_end":8474,"line_start":232,"line_end":232,"column_start":12,"column_end":20},"name":"read_i16","qualname":"<BitReader>::read_i16","value":"pub fn read_i16(&mut Self, u8) -> Result<i16>","parent":null,"children":[],"decl_id":null,"docs":" Read at most 16 bits into a i16.\n Assumes the bits are stored in two's complement format.\n","sig":null,"attributes":[{"value":"/ Read at most 16 bits into a i16.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":8354,"byte_end":8390,"line_start":230,"line_end":230,"column_start":5,"column_end":41}},{"value":"/ Assumes the bits are stored in two's complement format.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":8395,"byte_end":8454,"line_start":231,"line_end":231,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":8737,"byte_end":8745,"line_start":239,"line_end":239,"column_start":12,"column_end":20},"name":"read_i32","qualname":"<BitReader>::read_i32","value":"pub fn read_i32(&mut Self, u8) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":" Read at most 32 bits into a i32.\n Assumes the bits are stored in two's complement format.\n","sig":null,"attributes":[{"value":"/ Read at most 32 bits into a i32.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":8625,"byte_end":8661,"line_start":237,"line_end":237,"column_start":5,"column_end":41}},{"value":"/ Assumes the bits are stored in two's complement format.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":8666,"byte_end":8725,"line_start":238,"line_end":238,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":9012,"byte_end":9020,"line_start":246,"line_end":246,"column_start":12,"column_end":20},"name":"read_i64","qualname":"<BitReader>::read_i64","value":"pub fn read_i64(&mut Self, u8) -> Result<i64>","parent":null,"children":[],"decl_id":null,"docs":" Read at most 64 bits into a i64.\n Assumes the bits are stored in two's complement format.\n","sig":null,"attributes":[{"value":"/ Read at most 64 bits into a i64.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":8900,"byte_end":8936,"line_start":244,"line_end":244,"column_start":5,"column_end":41}},{"value":"/ Assumes the bits are stored in two's complement format.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":8941,"byte_end":9000,"line_start":245,"line_end":245,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":9251,"byte_end":9260,"line_start":253,"line_end":253,"column_start":12,"column_end":21},"name":"read_bool","qualname":"<BitReader>::read_bool","value":"pub fn read_bool(&mut Self) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Read a single bit as a boolean value.\n Interprets 1 as true and 0 as false.\n","sig":null,"attributes":[{"value":"/ Read a single bit as a boolean value.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":9153,"byte_end":9194,"line_start":251,"line_end":251,"column_start":5,"column_end":46}},{"value":"/ Interprets 1 as true and 0 as false.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":9199,"byte_end":9239,"line_start":252,"line_end":252,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":9542,"byte_end":9551,"line_start":262,"line_end":262,"column_start":12,"column_end":21},"name":"peek_bool","qualname":"<BitReader>::peek_bool","value":"pub fn peek_bool(&Self) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Read a single bit as a boolean value, but without moving the cursor forward.\n Interprets 1 as true and 0 as false.\n","sig":null,"attributes":[{"value":"/ Read a single bit as a boolean value, but without moving the cursor forward.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":9405,"byte_end":9485,"line_start":260,"line_end":260,"column_start":5,"column_end":85}},{"value":"/ Interprets 1 as true and 0 as false.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":9490,"byte_end":9530,"line_start":261,"line_end":261,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":9737,"byte_end":9741,"line_start":267,"line_end":267,"column_start":12,"column_end":16},"name":"skip","qualname":"<BitReader>::skip","value":"pub fn skip(&mut Self, u64) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Skip arbitrary number of bits. However, you can skip at most to the end of the byte slice.\n","sig":null,"attributes":[{"value":"/ Skip arbitrary number of bits. However, you can skip at most to the end of the byte slice.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":9631,"byte_end":9725,"line_start":266,"line_end":266,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":10258,"byte_end":10266,"line_start":281,"line_end":281,"column_start":12,"column_end":20},"name":"position","qualname":"<BitReader>::position","value":"pub fn position(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the position of the cursor, or how many bits have been read so far.\n","sig":null,"attributes":[{"value":"/ Returns the position of the cursor, or how many bits have been read so far.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":10167,"byte_end":10246,"line_start":280,"line_end":280,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":10421,"byte_end":10430,"line_start":286,"line_end":286,"column_start":12,"column_end":21},"name":"remaining","qualname":"<BitReader>::remaining","value":"pub fn remaining(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits not yet read from the underlying slice.\n","sig":null,"attributes":[{"value":"/ Returns the number of bits not yet read from the underlying slice.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":10339,"byte_end":10409,"line_start":285,"line_end":285,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":11108,"byte_end":11118,"line_start":300,"line_end":300,"column_start":12,"column_end":22},"name":"is_aligned","qualname":"<BitReader>::is_aligned","value":"pub fn is_aligned(&Self, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Helper to make sure the \"bit cursor\" is exactly at the beginning of a byte, or at specific\n multi-byte alignment position.","sig":null,"attributes":[{"value":"/ Helper to make sure the \"bit cursor\" is exactly at the beginning of a byte, or at specific","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":10494,"byte_end":10588,"line_start":290,"line_end":290,"column_start":5,"column_end":99}},{"value":"/ multi-byte alignment position.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":10593,"byte_end":10627,"line_start":291,"line_end":291,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":10632,"byte_end":10635,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ For example `reader.is_aligned(1)` returns true if exactly n bytes, or n * 8 bits, has been","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":10640,"byte_end":10735,"line_start":293,"line_end":293,"column_start":5,"column_end":100}},{"value":"/ read. Similarly, `reader.is_aligned(4)` returns true if exactly n * 32 bits, or n 4-byte","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":10740,"byte_end":10832,"line_start":294,"line_end":294,"column_start":5,"column_end":97}},{"value":"/ sequences has been read.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":10837,"byte_end":10865,"line_start":295,"line_end":295,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":10870,"byte_end":10873,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ This function can be used to validate the data is being read properly, for example by","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":10878,"byte_end":10967,"line_start":297,"line_end":297,"column_start":5,"column_end":94}},{"value":"/ adding invocations wrapped into `debug_assert!()` to places where it is known the data","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":10972,"byte_end":11062,"line_start":298,"line_end":298,"column_start":5,"column_end":95}},{"value":"/ should be n-byte aligned.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":11067,"byte_end":11096,"line_start":299,"line_end":299,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":11528,"byte_end":11533,"line_start":309,"line_end":309,"column_start":12,"column_end":17},"name":"align","qualname":"<BitReader>::align","value":"pub fn align(&mut Self, u32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Helper to move the \"bit cursor\" to exactly the beginning of a byte, or to a specific\n multi-byte alignment position.","sig":null,"attributes":[{"value":"/ Helper to move the \"bit cursor\" to exactly the beginning of a byte, or to a specific","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":11227,"byte_end":11315,"line_start":304,"line_end":304,"column_start":5,"column_end":93}},{"value":"/ multi-byte alignment position.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":11320,"byte_end":11354,"line_start":305,"line_end":305,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":11359,"byte_end":11362,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ That is, `reader.align(n)` moves the cursor to the next position that","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":11367,"byte_end":11440,"line_start":307,"line_end":307,"column_start":5,"column_end":78}},{"value":"/ is a multiple of n * 8 bits, if it's not correctly aligned already.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":11445,"byte_end":11516,"line_start":308,"line_end":308,"column_start":5,"column_end":76}}]},{"kind":"Type","id":{"krate":0,"index":37},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":13541,"byte_end":13547,"line_start":365,"line_end":365,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"result::Result<T, BitReaderError>","parent":null,"children":[],"decl_id":null,"docs":" Result type for those BitReader operations that can fail.\n","sig":null,"attributes":[{"value":"/ Result type for those BitReader operations that can fail.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":13470,"byte_end":13531,"line_start":364,"line_end":364,"column_start":1,"column_end":62}}]},{"kind":"StructVariant","id":{"krate":0,"index":63},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":13791,"byte_end":13804,"line_start":371,"line_end":371,"column_start":5,"column_end":18},"name":"NotEnoughData","qualname":"::BitReaderError::NotEnoughData","value":"BitReaderError::NotEnoughData { position, length, requested }","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Requested more bits than there are left in the byte slice at the current position.\n","sig":null,"attributes":[{"value":"/ Requested more bits than there are left in the byte slice at the current position.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":13700,"byte_end":13786,"line_start":370,"line_end":370,"column_start":5,"column_end":91}}]},{"kind":"StructVariant","id":{"krate":0,"index":67},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":14200,"byte_end":14218,"line_start":383,"line_end":383,"column_start":5,"column_end":23},"name":"TooManyBitsForType","qualname":"::BitReaderError::TooManyBitsForType","value":"BitReaderError::TooManyBitsForType { position, requested, allowed }","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Requested more bits than the returned variable can hold, for example more than 8 bits when\n reading into a u8.\n","sig":null,"attributes":[{"value":"/ Requested more bits than the returned variable can hold, for example more than 8 bits when","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":14074,"byte_end":14168,"line_start":381,"line_end":381,"column_start":5,"column_end":99}},{"value":"/ reading into a u8.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":14173,"byte_end":14195,"line_start":382,"line_end":382,"column_start":5,"column_end":27}}]},{"kind":"Enum","id":{"krate":0,"index":62},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":13679,"byte_end":13693,"line_start":369,"line_end":369,"column_start":10,"column_end":24},"name":"BitReaderError","qualname":"::BitReaderError","value":"pub enum BitReaderError {\n    NotEnoughData {\n        position: u64,\n        length: u64,\n        requested: u64,\n    },\n    TooManyBitsForType {\n        position: u64,\n        requested: u8,\n        allowed: u8,\n    },\n}","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":67}],"decl_id":null,"docs":" Error enumeration of BitReader errors.\n","sig":null,"attributes":[{"value":"/ Error enumeration of BitReader errors.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":13589,"byte_end":13631,"line_start":367,"line_end":367,"column_start":1,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":43},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":16232,"byte_end":16240,"line_start":437,"line_end":437,"column_start":11,"column_end":19},"name":"ReadInto","qualname":"::ReadInto","value":"ReadInto","parent":null,"children":[{"krate":0,"index":44}],"decl_id":null,"docs":" Helper trait to allow reading bits into a variable without explicitly mentioning its type.","sig":null,"attributes":[{"value":"/ Helper trait to allow reading bits into a variable without explicitly mentioning its type.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15244,"byte_end":15338,"line_start":410,"line_end":410,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15339,"byte_end":15342,"line_start":411,"line_end":411,"column_start":1,"column_end":4}},{"value":"/ If you can't or want, for some reason, to use BitReader's read methods (`read_u8` etc.) but","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15343,"byte_end":15438,"line_start":412,"line_end":412,"column_start":1,"column_end":96}},{"value":"/ want to rely on type inference instead, you can use the ReadInto trait. The trait is","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15439,"byte_end":15527,"line_start":413,"line_end":413,"column_start":1,"column_end":89}},{"value":"/ implemented for all basic integer types (8/16/32/64 bits, signed/unsigned)","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15528,"byte_end":15606,"line_start":414,"line_end":414,"column_start":1,"column_end":79}},{"value":"/ and the boolean type.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15607,"byte_end":15632,"line_start":415,"line_end":415,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15633,"byte_end":15636,"line_start":416,"line_end":416,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15637,"byte_end":15644,"line_start":417,"line_end":417,"column_start":1,"column_end":8}},{"value":"/ use bitreader::{BitReader,ReadInto};","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15645,"byte_end":15685,"line_start":418,"line_end":418,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15686,"byte_end":15689,"line_start":419,"line_end":419,"column_start":1,"column_end":4}},{"value":"/ let slice_of_u8 = &[0b1110_0000];","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15690,"byte_end":15727,"line_start":420,"line_end":420,"column_start":1,"column_end":38}},{"value":"/ let mut reader = BitReader::new(slice_of_u8);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15728,"byte_end":15777,"line_start":421,"line_end":421,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15778,"byte_end":15781,"line_start":422,"line_end":422,"column_start":1,"column_end":4}},{"value":"/ struct Foo {","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15782,"byte_end":15798,"line_start":423,"line_end":423,"column_start":1,"column_end":17}},{"value":"/     bar: u8,","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15799,"byte_end":15815,"line_start":424,"line_end":424,"column_start":1,"column_end":17}},{"value":"/     valid: bool,","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15816,"byte_end":15836,"line_start":425,"line_end":425,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15837,"byte_end":15842,"line_start":426,"line_end":426,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15843,"byte_end":15846,"line_start":427,"line_end":427,"column_start":1,"column_end":4}},{"value":"/ // No type mentioned here, instead the type of bits is inferred from the type of Foo::bar,","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15847,"byte_end":15941,"line_start":428,"line_end":428,"column_start":1,"column_end":95}},{"value":"/ // and consequently the correct \"overload\" is used.","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15942,"byte_end":15997,"line_start":429,"line_end":429,"column_start":1,"column_end":56}},{"value":"/ let bits = ReadInto::read(&mut reader, 2).unwrap();","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":15998,"byte_end":16053,"line_start":430,"line_end":430,"column_start":1,"column_end":56}},{"value":"/ let valid = ReadInto::read(&mut reader, 1).unwrap();","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":16054,"byte_end":16110,"line_start":431,"line_end":431,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":16111,"byte_end":16114,"line_start":432,"line_end":432,"column_start":1,"column_end":4}},{"value":"/ let foo = Foo { bar: bits, valid: valid };","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":16115,"byte_end":16161,"line_start":433,"line_end":433,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(foo.bar, 3);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":16162,"byte_end":16189,"line_start":434,"line_end":434,"column_start":1,"column_end":28}},{"value":"/ assert!(foo.valid);","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":16190,"byte_end":16213,"line_start":435,"line_end":435,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":16214,"byte_end":16221,"line_start":436,"line_end":436,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":16272,"byte_end":16276,"line_start":440,"line_end":440,"column_start":8,"column_end":12},"name":"read","qualname":"::ReadInto::read","value":"pub fn read(&mut BitReader, u8) -> Result<Self>","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":2791,"byte_end":2800,"line_start":79,"line_end":79,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":14336,"byte_end":14350,"line_start":391,"line_end":391,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":14673,"byte_end":14687,"line_start":400,"line_end":400,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":2791,"byte_end":2800,"line_start":79,"line_end":79,"column_start":10,"column_end":19},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":4},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":14336,"byte_end":14350,"line_start":391,"line_end":391,"column_start":16,"column_end":30},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":62},"to":{"krate":5,"index":2339}},{"span":{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/bitreader-0.3.6/src/lib.rs","byte_start":14673,"byte_end":14687,"line_start":400,"line_end":400,"column_start":23,"column_end":37},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":62},"to":{"krate":1,"index":9350}}]}