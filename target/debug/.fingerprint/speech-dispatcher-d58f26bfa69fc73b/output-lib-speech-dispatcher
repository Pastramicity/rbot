{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/speech-dispatcher-0.14.0/src/lib.rs","byte_start":13462,"byte_end":13479,"line_start":419,"line_end":419,"column_start":54,"column_end":71,"is_primary":true,"text":[{"text":"        let v = unsafe { spd_set_voice_type(*self.0, voice_type as u32) };","highlight_start":54,"highlight_end":71}],"label":"expected `i32`, found `u32`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you can convert a `u32` to an `i32` and panic if the converted value doesn't fit","code":null,"level":"help","spans":[{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/speech-dispatcher-0.14.0/src/lib.rs","byte_start":13462,"byte_end":13462,"line_start":419,"line_end":419,"column_start":54,"column_end":54,"is_primary":true,"text":[{"text":"        let v = unsafe { spd_set_voice_type(*self.0, voice_type as u32) };","highlight_start":54,"highlight_end":54}],"label":null,"suggested_replacement":"(","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/speech-dispatcher-0.14.0/src/lib.rs","byte_start":13479,"byte_end":13479,"line_start":419,"line_end":419,"column_start":71,"column_end":71,"is_primary":true,"text":[{"text":"        let v = unsafe { spd_set_voice_type(*self.0, voice_type as u32) };","highlight_start":71,"highlight_end":71}],"label":null,"suggested_replacement":").try_into().unwrap()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/speech-dispatcher-0.14.0/src/lib.rs:419:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m419\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let v = unsafe { spd_set_voice_type(*self.0, voice_type as u32) };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `i32`, found `u32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m419\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let v = unsafe { spd_set_voice_type(*self.0, \u001b[0m\u001b[0m\u001b[38;5;10m(\u001b[0m\u001b[0mvoice_type as u32\u001b[0m\u001b[0m\u001b[38;5;10m).try_into().unwrap()\u001b[0m\u001b[0m) };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/speech-dispatcher-0.14.0/src/lib.rs","byte_start":13863,"byte_end":13880,"line_start":427,"line_end":427,"column_start":58,"column_end":75,"is_primary":true,"text":[{"text":"        let v = unsafe { spd_set_voice_type_all(*self.0, voice_type as u32) };","highlight_start":58,"highlight_end":75}],"label":"expected `i32`, found `u32`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you can convert a `u32` to an `i32` and panic if the converted value doesn't fit","code":null,"level":"help","spans":[{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/speech-dispatcher-0.14.0/src/lib.rs","byte_start":13863,"byte_end":13863,"line_start":427,"line_end":427,"column_start":58,"column_end":58,"is_primary":true,"text":[{"text":"        let v = unsafe { spd_set_voice_type_all(*self.0, voice_type as u32) };","highlight_start":58,"highlight_end":58}],"label":null,"suggested_replacement":"(","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/speech-dispatcher-0.14.0/src/lib.rs","byte_start":13880,"byte_end":13880,"line_start":427,"line_end":427,"column_start":75,"column_end":75,"is_primary":true,"text":[{"text":"        let v = unsafe { spd_set_voice_type_all(*self.0, voice_type as u32) };","highlight_start":75,"highlight_end":75}],"label":null,"suggested_replacement":").try_into().unwrap()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/speech-dispatcher-0.14.0/src/lib.rs:427:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m427\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let v = unsafe { spd_set_voice_type_all(*self.0, voice_type as u32) };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `i32`, found `u32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m427\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let v = unsafe { spd_set_voice_type_all(*self.0, \u001b[0m\u001b[0m\u001b[38;5;10m(\u001b[0m\u001b[0mvoice_type as u32\u001b[0m\u001b[0m\u001b[38;5;10m).try_into().unwrap()\u001b[0m\u001b[0m) };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/speech-dispatcher-0.14.0/src/lib.rs","byte_start":14293,"byte_end":14310,"line_start":435,"line_end":435,"column_start":58,"column_end":75,"is_primary":true,"text":[{"text":"        let v = unsafe { spd_set_voice_type_uid(*self.0, voice_type as u32, target_uid) };","highlight_start":58,"highlight_end":75}],"label":"expected `i32`, found `u32`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you can convert a `u32` to an `i32` and panic if the converted value doesn't fit","code":null,"level":"help","spans":[{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/speech-dispatcher-0.14.0/src/lib.rs","byte_start":14293,"byte_end":14293,"line_start":435,"line_end":435,"column_start":58,"column_end":58,"is_primary":true,"text":[{"text":"        let v = unsafe { spd_set_voice_type_uid(*self.0, voice_type as u32, target_uid) };","highlight_start":58,"highlight_end":58}],"label":null,"suggested_replacement":"(","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/speech-dispatcher-0.14.0/src/lib.rs","byte_start":14310,"byte_end":14310,"line_start":435,"line_end":435,"column_start":75,"column_end":75,"is_primary":true,"text":[{"text":"        let v = unsafe { spd_set_voice_type_uid(*self.0, voice_type as u32, target_uid) };","highlight_start":75,"highlight_end":75}],"label":null,"suggested_replacement":").try_into().unwrap()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pastra/.cargo/registry/src/github.com-1ecc6299db9ec823/speech-dispatcher-0.14.0/src/lib.rs:435:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let v = unsafe { spd_set_voice_type_uid(*self.0, voice_type as u32, target_uid) };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `i32`, found `u32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let v = unsafe { spd_set_voice_type_uid(*self.0, \u001b[0m\u001b[0m\u001b[38;5;10m(\u001b[0m\u001b[0mvoice_type as u32\u001b[0m\u001b[0m\u001b[38;5;10m).try_into().unwrap()\u001b[0m\u001b[0m, target_uid) };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++\u001b[0m\n\n"}
{"message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0308`.\u001b[0m\n"}
